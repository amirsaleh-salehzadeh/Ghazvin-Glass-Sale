/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ggc.struts.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ggc.Classes.CompanyUserENT;
import com.ggc.Classes.NewsENT;
import com.ggc.Classes.NewsLST;
import com.ggc.Classes.OrderENT;
import com.ggc.Classes.OrderLST;
import com.ggc.Classes.RealUserENT;
import com.ggc.Classes.RoleENT;
import com.ggc.Classes.UserENT;
import com.ggc.Classes.UserLST;
import com.ggc.Classes.tools.NVL;
import com.ggc.Classes.tools.UTF8;
import com.ggc.business.NewsBusinessManager;
import com.ggc.business.UserBusinessManager;
import com.ggc.business.orderBusinessManager;

/** 
 * MyEclipse Struts
 * Creation date: 09-21-2010
 * 
 * XDoclet definition:
 * @struts.action parameter="reqCode" validate="true"
 * @struts.action-forward name="list" path="/jsp/farsi/news/newsList.jsp"
 */
public class OrderAction extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward af = null;
		String reqCode = request.getParameter("reqCode");
		UserENT userENT = new UserENT();
		orderBusinessManager businessManager = new  orderBusinessManager();
		if(request.getSession().getAttribute("loggedInUser")!=null){
			userENT = (UserENT)request.getSession().getAttribute("loggedInUser");
			request.setAttribute("userENT", userENT);
		}
		if ("updateDelete".equalsIgnoreCase(reqCode)){
			int orderId = NVL.getInt(request.getParameter("orderId"));
			businessManager.updateStatus(orderId);
			reqCode = "userOrderList";
		}
		if ("delete".equalsIgnoreCase(reqCode)){
			int orderId = NVL.getInt(request.getParameter("orderId"));
			businessManager.deleteOrder(orderId);
			reqCode = "list";
		}
		if("form".equalsIgnoreCase(reqCode)||"orderPage".equalsIgnoreCase(reqCode)){
			OrderENT ent = new OrderENT();
			ent.setProduct(request.getParameter("productName"));
			ent.setPacking(false);
			request.setAttribute("orderENT", ent);
			af = mapping.findForward("form");
		}else if ("list".equalsIgnoreCase(reqCode)||"userOrderList".equalsIgnoreCase(reqCode)){
			businessManager = new  orderBusinessManager();
			OrderLST lst = new OrderLST();
			if("userOrderList".equalsIgnoreCase(reqCode)){
				lst.setUsername(userENT.getUserName());
				af=mapping.findForward("myList");
			}else
				af=mapping.findForward("list");
			if(request.getParameter("page")!=null)
				lst.setCurrentPage(NVL.getInt(request.getParameter("page")));
			String mng = "";
			int x = 0;
			for(int i = 0; i < userENT.getRoleENTs().size();i++){
				if(userENT.getRoleENTs().get(i).getEname().equalsIgnoreCase("floatmng")){
					mng = "فلوت";
					x++;
				}
				if(userENT.getRoleENTs().get(i).getEname().equalsIgnoreCase("sheetmng")){
					mng = "شیت";
					x++;
				}
				if(x==2)
					mng="";
			}
			lst.setProductname(mng);
			lst = businessManager.getOrderLST(lst);
			request.setAttribute("orderLST", lst);
		}else if ("confirmation".equalsIgnoreCase(reqCode)){
			OrderENT orderENT = new OrderENT();
			orderENT = this.setOrderENT(request);
		    request.setAttribute("orderENT", orderENT);
			af = mapping.findForward("confirmation");
		}else if("getOrder".equalsIgnoreCase(reqCode)||"getOrderPrint".equalsIgnoreCase(reqCode)){
			OrderENT orderENT = new OrderENT();
			orderENT.setOrderId(NVL.getInt(request.getParameter("orderId")));
			if(!"getOrderPrint".equalsIgnoreCase(reqCode))
				orderENT.setOperator(userENT.getUserName());
			userENT = new UserENT();
			orderENT = businessManager.getOrderENT(orderENT);
			userENT = new UserBusinessManager().getUserENT(orderENT.getUsername());
			orderENT.setUserENT(userENT);
			request.setAttribute("orderENT", orderENT);
			af = mapping.findForward("view");
		}else if ("save".equalsIgnoreCase(reqCode)){
			OrderENT orderENT = new OrderENT();
			orderENT = this.setOrderENT(request);
		    orderENT = businessManager.saveOrder(orderENT);
		    request.setAttribute("orderENT", orderENT);
			af = mapping.findForward("confirmation");
		}
		return af;
	}
	private OrderENT setOrderENT(HttpServletRequest request) {
		OrderENT orderENT = new OrderENT();
		orderENT.setContext(request.getParameter("context"));
		orderENT.setUsername(request.getParameter("userName"));
		orderENT.setAmount(request.getParameter("amount"));
		if(request.getParameter("width")==null)
			orderENT.setSize(request.getParameter("size"));
		else
			orderENT.setSize(request.getParameter("width")+"*"+request.getParameter("height")+" "+request.getParameter("unit"));
		orderENT.setStatus("در انتظار بررسی");
		orderENT.setProduct(request.getParameter("product"));
		orderENT.setThickness(request.getParameter("thickness"));
		Calendar cal = Calendar.getInstance();
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    boolean x = false;
	    if(request.getParameter("packing").equalsIgnoreCase("true"))
	    	x = true;
	    orderENT.setPacking(x);
	    orderENT.setDateTime(sdf.format(cal.getTime()));
		return orderENT;
	}
}