/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package ams.ggc.struts;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import ams.ggc.common.*;
import ams.ggc.common.NEWS.NewsDAOInterface;
import ams.ggc.common.User.UserDAOInterface;
import ams.ggc.common.User.UserENT;
import ams.ggc.common.order.OrderDAOInterface;
import ams.ggc.common.order.OrderENT;
import ams.ggc.common.order.OrderLST;
import ams.ggc.common.tools.AMSException;
import ams.ggc.common.tools.NVL;
import ams.ggc.common.tools.UTF8;


/** 
 * MyEclipse Struts
 * Creation date: 09-21-2010
 * 
 * XDoclet definition:
 * @struts.action parameter="reqCode" validate="true"
 * @struts.action-forward name="list" path="/jsp/farsi/news/newsList.jsp"
 */
public class OrderAction extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward af = null;
		String reqCode = request.getParameter("reqCode");
		String error = "";
		String success = "";
		if ("updateDelete".equalsIgnoreCase(reqCode)){
			int orderId = NVL.getInt(request.getParameter("orderId"));
			try {
				getDAO().updateStatus(orderId);
			} catch (AMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			reqCode = "userOrderList";
		}
		if ("delete".equalsIgnoreCase(reqCode)){
			int orderId = NVL.getInt(request.getParameter("orderId"));
			try {
				getDAO().deleteOrder(orderId);
			} catch (AMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			reqCode = "list";
		}
		if("form".equalsIgnoreCase(reqCode)||"orderPage".equalsIgnoreCase(reqCode)){
			OrderENT ent = new OrderENT();
			ent.setProduct(request.getParameter("productName"));
			ent.setPacking(false);
			request.setAttribute("orderENT", ent);
			af = mapping.findForward("form");
		}else if ("list".equalsIgnoreCase(reqCode)||"userOrderList".equalsIgnoreCase(reqCode)){
			OrderLST lst = new OrderLST();
			if(request.getParameter("keyword")!=null)
				lst.setKeyword(request.getParameter("keyword"));
			if("userOrderList".equalsIgnoreCase(reqCode)){
				lst.setUsername(request.getRemoteUser());
				af=mapping.findForward("myList");
			}else
				af=mapping.findForward("list");
			if(request.getParameter("page")!=null)
				lst.setCurrentPage(NVL.getInt(request.getParameter("page")));
			String mng = "";
//			int x = 0;
//			for(int i = 0; i < userENT.getRoleENTs().size();i++){
//				if(userENT.getRoleENTs().get(i).getEname().equalsIgnoreCase("floatmng")){
//					mng = "فلوت";
//					x++;
//				}
//				if(userENT.getRoleENTs().get(i).getEname().equalsIgnoreCase("sheetmng")){
//					mng = "شیت";
//					x++;
//				}
//				if(x==2)
//					mng="";
//			}
			lst.setProductname(mng);
			try {
				lst = getDAO().getOrderLST(lst);
			} catch (AMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			request.setAttribute("orderLST", lst);
		}else if ("confirmation".equalsIgnoreCase(reqCode)){
			OrderENT orderENT = new OrderENT();
			orderENT = this.setOrderENT(request);
		    request.setAttribute("orderENT", orderENT);
		    success = "تایید سفارش";
			af = mapping.findForward("confirmation");
		}else if("getOrder".equalsIgnoreCase(reqCode)||"getOrderPrint".equalsIgnoreCase(reqCode)){
			OrderENT orderENT = new OrderENT();
			orderENT.setOrderId(NVL.getInt(request.getParameter("orderId")));
			if(!"getOrderPrint".equalsIgnoreCase(reqCode))
				orderENT.setOperator(request.getRemoteUser());
			try {
				orderENT = getDAO().getOrderENT(orderENT);
				UserENT userENT = getUserDAO().getUserENT(orderENT.getUsername());
				orderENT.setUserENT(userENT);
			} catch (AMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				request.setAttribute("userENT", getUserDAO().getUserENT(request.getRemoteUser()));
			} catch (AMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			request.setAttribute("orderENT", orderENT);
			af = mapping.findForward("view");
		}else if ("save".equalsIgnoreCase(reqCode)){
			OrderENT orderENT = new OrderENT();
			orderENT = this.setOrderENT(request);
		    try {
				orderENT = getDAO().saveOrder(orderENT);
				success = "ثبت سفارش با موفقیت انجام گردید";
			} catch (AMSException e) {
				error = "بروز خطا در ثبت سفارش";
				e.printStackTrace();
			}
		    request.setAttribute("orderENT", orderENT);
			af = mapping.findForward("confirmation");
		}
		request.setAttribute("error", error);
		request.setAttribute("success", success);
		return af;
	}
	private OrderENT setOrderENT(HttpServletRequest request) {
		OrderENT orderENT = new OrderENT();
		orderENT.setContext(request.getParameter("context"));
		orderENT.setProduct(request.getParameter("product"));
		orderENT.setUsername(request.getParameter("userName"));
		orderENT.setAmount(request.getParameter("amount"));
		if(request.getParameter("totalPrice")!=null)
			orderENT.setTotalPrice(request.getParameter("totalPrice"));
		else{
			orderENT.setTotalPrice(calculatePrice(request)+"");
			request.setAttribute("productPrice", calculatePrice(request));
		}
		if(request.getParameter("width")==null)
			orderENT.setSize(request.getParameter("size"));
		else
			orderENT.setSize(request.getParameter("width")+"*"+request.getParameter("height")+" "+request.getParameter("unit"));
		orderENT.setStatus("در انتظار بررسی");
		orderENT.setThickness(request.getParameter("thickness"));
		Calendar cal = Calendar.getInstance();
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    boolean x = false;
	    if(request.getParameter("packing").equalsIgnoreCase("true")){
	    	x = true;
	    	long i = NVL.getInt(orderENT.getThickness())*1500*NVL.getInt(orderENT.getAmount());
	    	request.setAttribute("packingPrice", i);
	    	orderENT.setTotalPrice(NVL.getInt(orderENT.getTotalPrice())+i+"");
	    }else{
	    	request.setAttribute("packingPrice", 0);
	    }
	    orderENT.setPacking(x);
	    orderENT.setDateTime(sdf.format(cal.getTime()));
		return orderENT;
	}
	private long calculatePrice(HttpServletRequest request){
		long price = 0;
		if(request.getParameter("price")!=null){
			price = NVL.getInt(request.getParameter("amount")) * NVL.getInt(request.getParameter("price"));
			long i = (price * 3 )/ 100;
			price = price + i;
		}
		return price;
	}
	private static OrderDAOInterface getDAO() {
		return ams.ggc.common.orm.SellDAOManager.getOrderDAOInterface();
	}
	
	private static UserDAOInterface getUserDAO() {
		return ams.ggc.common.orm.SellDAOManager.getUserDAOInterface();
	}
}